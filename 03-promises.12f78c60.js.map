{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,QACjCC,EAAYF,SAASG,iBAAiB,SAE5C,IAAIC,EAAa,KACbC,EAAkB,EA2CtB,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAELC,KAAKC,SAAW,GAEpCH,EAAQ,CACNH,SAAUA,EACVC,MAAOA,IAGTG,EAAO,CACLJ,SAAUA,EACVC,MAAOA,GACP,G,CAvDRT,EAAQe,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAEC,iBACF,MAAMC,EAASC,OAAOhB,EAAU,GAAGiB,OAC7BC,EAAOF,OAAOhB,EAAU,GAAGiB,OAC3BE,EAAQH,OAAOhB,EAAU,GAAGiB,OAClC,IAAIG,EAAcD,EAElBE,YAAW,KACNN,EAAS,IAIZb,EAAaoB,aAAY,KAGvB,GAFAnB,GAAmB,EACnBiB,GAAeF,EACZf,EAAkBY,EAGnB,OAFAQ,cAAcrB,QACdC,EAAkB,GAGpBC,EAAcD,EAAiBiB,GAC9BI,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEhEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBX,EAAA8B,OAAOG,QAAQ,sBAAoBvB,QAAiBC,MAAU,GAC9D,GACFY,GAEFd,EAAcD,EAAiBgB,GAC9BK,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEhEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBX,EAAA8B,OAAOG,QAAQ,sBAAoBvB,QAAeC,MAAU,IAC5D,GACFa,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('form');\nconst inputsRef = document.querySelectorAll('input');\n\nlet intervalId = null;\nlet counterInterval = 1;\n\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e){\n  e.preventDefault();\n  const amount = Number(inputsRef[2].value);\n  const step = Number(inputsRef[1].value);\n  const delay = Number(inputsRef[0].value);\n  let counterStep = delay;\n\n  setTimeout(()=>{\n    if(amount < 1){\n      return\n    }\n\n    intervalId = setInterval(()=>{\n      counterInterval += 1;\n      counterStep += step;\n      if(counterInterval > amount){\n        clearInterval(intervalId);\n        counterInterval = 1;\n        return\n      }\n      createPromise(counterInterval, counterStep)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    },step);\n\n    createPromise(counterInterval, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  },delay);\n};\n\nfunction createPromise(position, delay) {\n  \n  return new Promise((resolve, reject) => {\n    \n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({\n        position: position,\n        delay: delay,\n      });\n    } else {\n      reject({\n        position: position,\n        delay: delay,\n      });\n    };\n  });\n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$inputsRef","querySelectorAll","$47d4ff9957288465$var$intervalId","$47d4ff9957288465$var$counterInterval","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","addEventListener","e","preventDefault","amount","Number","value","step","delay1","counterStep","setTimeout","setInterval","clearInterval","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.12f78c60.js.map"}